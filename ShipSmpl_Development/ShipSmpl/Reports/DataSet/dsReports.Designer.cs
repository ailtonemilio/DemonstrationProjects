// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Runtime Version:4.0.30319.42000
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Data;
using System.Diagnostics;
using Microsoft.VisualBasic.CompilerServices;

namespace ShipSmpl
{



    /// <summary>
/// Represents a strongly typed in-memory cache of data.
/// </summary>
    [Serializable()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProvider("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRoot("dsReports")]
    [System.ComponentModel.Design.HelpKeyword("vs.data.DataSet")]
    public partial class dsReports : DataSet
    {
        private HoursWorkedYardDataTable tableHoursWorkedYard;
        private HoursWorkedYardTypeDataTable tableHoursWorkedYardType;
        private HoursWorkedEmploeeSiteDataTable tableHoursWorkedEmploeeSite;
        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public dsReports() : base()
        {
            BeginInit();
            InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected dsReports(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
        {
            if (IsBinarySerialized(info, context) == true)
            {
                InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = SchemaChanged;
                Tables.CollectionChanged += schemaChangedHandler1;
                Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }

            string strSchema = Conversions.ToString(info.GetValue("XmlSchema", typeof(string)));
            if (DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if (ds.Tables["HoursWorkedYard"] is object)
                {
                    base.Tables.Add(new HoursWorkedYardDataTable(ds.Tables["HoursWorkedYard"]));
                }

                if (ds.Tables["HoursWorkedYardType"] is object)
                {
                    base.Tables.Add(new HoursWorkedYardTypeDataTable(ds.Tables["HoursWorkedYardType"]));
                }

                if (ds.Tables["HoursWorkedEmploeeSite"] is object)
                {
                    base.Tables.Add(new HoursWorkedEmploeeSiteDataTable(ds.Tables["HoursWorkedEmploeeSite"]));
                }

                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }

            GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HoursWorkedYardDataTable HoursWorkedYard
        {
            get
            {
                return tableHoursWorkedYard;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HoursWorkedYardTypeDataTable HoursWorkedYardType
        {
            get
            {
                return tableHoursWorkedYardType;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HoursWorkedEmploeeSiteDataTable HoursWorkedEmploeeSite
        {
            get
            {
                return tableHoursWorkedEmploeeSite;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return _schemaSerializationMode;
            }

            set
            {
                _schemaSerializationMode = value;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override void InitializeDerivedDataSet()
        {
            BeginInit();
            InitClass();
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public override DataSet Clone()
        {
            dsReports cln = (dsReports)base.Clone();
            cln.InitVars();
            cln.SchemaSerializationMode = SchemaSerializationMode;
            return cln;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
        {
            if (DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
            {
                Reset();
                var ds = new DataSet();
                ds.ReadXml(reader);
                if (ds.Tables["HoursWorkedYard"] is object)
                {
                    base.Tables.Add(new HoursWorkedYardDataTable(ds.Tables["HoursWorkedYard"]));
                }

                if (ds.Tables["HoursWorkedYardType"] is object)
                {
                    base.Tables.Add(new HoursWorkedYardTypeDataTable(ds.Tables["HoursWorkedYardType"]));
                }

                if (ds.Tables["HoursWorkedEmploeeSite"] is object)
                {
                    base.Tables.Add(new HoursWorkedEmploeeSiteDataTable(ds.Tables["HoursWorkedEmploeeSite"]));
                }

                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXml(reader);
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            var stream = new System.IO.MemoryStream();
            WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0L;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal void InitVars()
        {
            InitVars(true);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal void InitVars(bool initTable)
        {
            tableHoursWorkedYard = (HoursWorkedYardDataTable)base.Tables["HoursWorkedYard"];
            if (initTable == true)
            {
                if (tableHoursWorkedYard is object)
                {
                    tableHoursWorkedYard.InitVars();
                }
            }

            tableHoursWorkedYardType = (HoursWorkedYardTypeDataTable)base.Tables["HoursWorkedYardType"];
            if (initTable == true)
            {
                if (tableHoursWorkedYardType is object)
                {
                    tableHoursWorkedYardType.InitVars();
                }
            }

            tableHoursWorkedEmploeeSite = (HoursWorkedEmploeeSiteDataTable)base.Tables["HoursWorkedEmploeeSite"];
            if (initTable == true)
            {
                if (tableHoursWorkedEmploeeSite is object)
                {
                    tableHoursWorkedEmploeeSite.InitVars();
                }
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitClass()
        {
            DataSetName = "dsReports";
            Prefix = "";
            Namespace = "http://tempuri.org/dsReports.xsd";
            EnforceConstraints = true;
            SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
            tableHoursWorkedYard = new HoursWorkedYardDataTable();
            base.Tables.Add(tableHoursWorkedYard);
            tableHoursWorkedYardType = new HoursWorkedYardTypeDataTable();
            base.Tables.Add(tableHoursWorkedYardType);
            tableHoursWorkedEmploeeSite = new HoursWorkedEmploeeSiteDataTable();
            base.Tables.Add(tableHoursWorkedEmploeeSite);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeHoursWorkedYard()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeHoursWorkedYardType()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeHoursWorkedEmploeeSite()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if (e.Action == System.ComponentModel.CollectionChangeAction.Remove)
            {
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
        {
            var ds = new dsReports();
            var type = new System.Xml.Schema.XmlSchemaComplexType();
            var sequence = new System.Xml.Schema.XmlSchemaSequence();
            var any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            var dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                var s1 = new System.IO.MemoryStream();
                var s2 = new System.IO.MemoryStream();
                try
                {
                    System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                    while (schemas.MoveNext())
                    {
                        schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                        s2.SetLength(0L);
                        schema.Write(s2);
                        if (s1.Length == s2.Length)
                        {
                            s1.Position = 0L;
                            s2.Position = 0L;
                            while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                            {
                            }

                            if (s1.Position == s1.Length)
                            {
                                return type;
                            }
                        }
                    }
                }
                finally
                {
                    if (s1 is object)
                    {
                        s1.Close();
                    }

                    if (s2 is object)
                    {
                        s2.Close();
                    }
                }
            }

            xs.Add(dsSchema);
            return type;
        }

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void HoursWorkedYardRowChangeEventHandler(object sender, HoursWorkedYardRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void HoursWorkedYardTypeRowChangeEventHandler(object sender, HoursWorkedYardTypeRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void HoursWorkedEmploeeSiteRowChangeEventHandler(object sender, HoursWorkedEmploeeSiteRowChangeEvent e);

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class HoursWorkedYardDataTable : TypedTableBase<HoursWorkedYardRow>
        {
            private DataColumn columnYard;
            private DataColumn columnPunch_Type;
            private DataColumn columnTime;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedYardDataTable() : base()
            {
                TableName = "HoursWorkedYard";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal HoursWorkedYardDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected HoursWorkedYardDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn YardColumn
            {
                get
                {
                    return columnYard;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn Punch_TypeColumn
            {
                get
                {
                    return columnPunch_Type;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn TimeColumn
            {
                get
                {
                    return columnTime;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedYardRow this[int index]
            {
                get
                {
                    return (HoursWorkedYardRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event HoursWorkedYardRowChangeEventHandler HoursWorkedYardRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event HoursWorkedYardRowChangeEventHandler HoursWorkedYardRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event HoursWorkedYardRowChangeEventHandler HoursWorkedYardRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event HoursWorkedYardRowChangeEventHandler HoursWorkedYardRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddHoursWorkedYardRow(HoursWorkedYardRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedYardRow AddHoursWorkedYardRow(string Yard, string Punch_Type, string Time)
            {
                HoursWorkedYardRow rowHoursWorkedYardRow = (HoursWorkedYardRow)NewRow();
                var columnValuesArray = new object[] { Yard, Punch_Type, Time };
                rowHoursWorkedYardRow.ItemArray = columnValuesArray;
                Rows.Add(rowHoursWorkedYardRow);
                return rowHoursWorkedYardRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override DataTable Clone()
            {
                HoursWorkedYardDataTable cln = (HoursWorkedYardDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new HoursWorkedYardDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars()
            {
                columnYard = Columns["Yard"];
                columnPunch_Type = Columns["Punch Type"];
                columnTime = Columns["Time"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass()
            {
                columnYard = new DataColumn("Yard", typeof(string), null, MappingType.Element);
                Columns.Add(columnYard);
                columnPunch_Type = new DataColumn("Punch Type", typeof(string), null, MappingType.Element);
                Columns.Add(columnPunch_Type);
                columnTime = new DataColumn("Time", typeof(string), null, MappingType.Element);
                Columns.Add(columnTime);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedYardRow NewHoursWorkedYardRow()
            {
                return (HoursWorkedYardRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new HoursWorkedYardRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(HoursWorkedYardRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (HoursWorkedYardRowChanged is object)
                {
                    HoursWorkedYardRowChanged?.Invoke(this, new HoursWorkedYardRowChangeEvent((HoursWorkedYardRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (HoursWorkedYardRowChanging is object)
                {
                    HoursWorkedYardRowChanging?.Invoke(this, new HoursWorkedYardRowChangeEvent((HoursWorkedYardRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (HoursWorkedYardRowDeleted is object)
                {
                    HoursWorkedYardRowDeleted?.Invoke(this, new HoursWorkedYardRowChangeEvent((HoursWorkedYardRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (HoursWorkedYardRowDeleting is object)
                {
                    HoursWorkedYardRowDeleting?.Invoke(this, new HoursWorkedYardRowChangeEvent((HoursWorkedYardRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveHoursWorkedYardRow(HoursWorkedYardRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new dsReports();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HoursWorkedYardDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class HoursWorkedYardTypeDataTable : TypedTableBase<HoursWorkedYardTypeRow>
        {
            private DataColumn columnYard;
            private DataColumn columnType;
            private DataColumn columnPunch_Type;
            private DataColumn columnTime;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedYardTypeDataTable() : base()
            {
                TableName = "HoursWorkedYardType";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal HoursWorkedYardTypeDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected HoursWorkedYardTypeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn YardColumn
            {
                get
                {
                    return columnYard;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn TypeColumn
            {
                get
                {
                    return columnType;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn Punch_TypeColumn
            {
                get
                {
                    return columnPunch_Type;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn TimeColumn
            {
                get
                {
                    return columnTime;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedYardTypeRow this[int index]
            {
                get
                {
                    return (HoursWorkedYardTypeRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event HoursWorkedYardTypeRowChangeEventHandler HoursWorkedYardTypeRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event HoursWorkedYardTypeRowChangeEventHandler HoursWorkedYardTypeRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event HoursWorkedYardTypeRowChangeEventHandler HoursWorkedYardTypeRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event HoursWorkedYardTypeRowChangeEventHandler HoursWorkedYardTypeRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddHoursWorkedYardTypeRow(HoursWorkedYardTypeRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedYardTypeRow AddHoursWorkedYardTypeRow(string Yard, string Type, string Punch_Type, string Time)
            {
                HoursWorkedYardTypeRow rowHoursWorkedYardTypeRow = (HoursWorkedYardTypeRow)NewRow();
                var columnValuesArray = new object[] { Yard, Type, Punch_Type, Time };
                rowHoursWorkedYardTypeRow.ItemArray = columnValuesArray;
                Rows.Add(rowHoursWorkedYardTypeRow);
                return rowHoursWorkedYardTypeRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override DataTable Clone()
            {
                HoursWorkedYardTypeDataTable cln = (HoursWorkedYardTypeDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new HoursWorkedYardTypeDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars()
            {
                columnYard = Columns["Yard"];
                columnType = Columns["Type"];
                columnPunch_Type = Columns["Punch Type"];
                columnTime = Columns["Time"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass()
            {
                columnYard = new DataColumn("Yard", typeof(string), null, MappingType.Element);
                Columns.Add(columnYard);
                columnType = new DataColumn("Type", typeof(string), null, MappingType.Element);
                Columns.Add(columnType);
                columnPunch_Type = new DataColumn("Punch Type", typeof(string), null, MappingType.Element);
                Columns.Add(columnPunch_Type);
                columnTime = new DataColumn("Time", typeof(string), null, MappingType.Element);
                Columns.Add(columnTime);
                columnType.Caption = "Punch Type";
                columnPunch_Type.Caption = "Time";
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedYardTypeRow NewHoursWorkedYardTypeRow()
            {
                return (HoursWorkedYardTypeRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new HoursWorkedYardTypeRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(HoursWorkedYardTypeRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (HoursWorkedYardTypeRowChanged is object)
                {
                    HoursWorkedYardTypeRowChanged?.Invoke(this, new HoursWorkedYardTypeRowChangeEvent((HoursWorkedYardTypeRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (HoursWorkedYardTypeRowChanging is object)
                {
                    HoursWorkedYardTypeRowChanging?.Invoke(this, new HoursWorkedYardTypeRowChangeEvent((HoursWorkedYardTypeRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (HoursWorkedYardTypeRowDeleted is object)
                {
                    HoursWorkedYardTypeRowDeleted?.Invoke(this, new HoursWorkedYardTypeRowChangeEvent((HoursWorkedYardTypeRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (HoursWorkedYardTypeRowDeleting is object)
                {
                    HoursWorkedYardTypeRowDeleting?.Invoke(this, new HoursWorkedYardTypeRowChangeEvent((HoursWorkedYardTypeRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveHoursWorkedYardTypeRow(HoursWorkedYardTypeRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new dsReports();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HoursWorkedYardTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class HoursWorkedEmploeeSiteDataTable : TypedTableBase<HoursWorkedEmploeeSiteRow>
        {
            private DataColumn columnName_Employee;
            private DataColumn columnType;
            private DataColumn columnYard;
            private DataColumn columnPunch_Type;
            private DataColumn columnTime;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedEmploeeSiteDataTable() : base()
            {
                TableName = "HoursWorkedEmploeeSite";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal HoursWorkedEmploeeSiteDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected HoursWorkedEmploeeSiteDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn Name_EmployeeColumn
            {
                get
                {
                    return columnName_Employee;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn TypeColumn
            {
                get
                {
                    return columnType;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn YardColumn
            {
                get
                {
                    return columnYard;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn Punch_TypeColumn
            {
                get
                {
                    return columnPunch_Type;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataColumn TimeColumn
            {
                get
                {
                    return columnTime;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedEmploeeSiteRow this[int index]
            {
                get
                {
                    return (HoursWorkedEmploeeSiteRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event HoursWorkedEmploeeSiteRowChangeEventHandler HoursWorkedEmploeeSiteRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event HoursWorkedEmploeeSiteRowChangeEventHandler HoursWorkedEmploeeSiteRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event HoursWorkedEmploeeSiteRowChangeEventHandler HoursWorkedEmploeeSiteRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event HoursWorkedEmploeeSiteRowChangeEventHandler HoursWorkedEmploeeSiteRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddHoursWorkedEmploeeSiteRow(HoursWorkedEmploeeSiteRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedEmploeeSiteRow AddHoursWorkedEmploeeSiteRow(string Name_Employee, string Type, string Yard, string Punch_Type, string Time)
            {
                HoursWorkedEmploeeSiteRow rowHoursWorkedEmploeeSiteRow = (HoursWorkedEmploeeSiteRow)NewRow();
                var columnValuesArray = new object[] { Name_Employee, Type, Yard, Punch_Type, Time };
                rowHoursWorkedEmploeeSiteRow.ItemArray = columnValuesArray;
                Rows.Add(rowHoursWorkedEmploeeSiteRow);
                return rowHoursWorkedEmploeeSiteRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override DataTable Clone()
            {
                HoursWorkedEmploeeSiteDataTable cln = (HoursWorkedEmploeeSiteDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new HoursWorkedEmploeeSiteDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars()
            {
                columnName_Employee = Columns["Name Employee"];
                columnType = Columns["Type"];
                columnYard = Columns["Yard"];
                columnPunch_Type = Columns["Punch Type"];
                columnTime = Columns["Time"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass()
            {
                columnName_Employee = new DataColumn("Name Employee", typeof(string), null, MappingType.Element);
                Columns.Add(columnName_Employee);
                columnType = new DataColumn("Type", typeof(string), null, MappingType.Element);
                Columns.Add(columnType);
                columnYard = new DataColumn("Yard", typeof(string), null, MappingType.Element);
                Columns.Add(columnYard);
                columnPunch_Type = new DataColumn("Punch Type", typeof(string), null, MappingType.Element);
                Columns.Add(columnPunch_Type);
                columnTime = new DataColumn("Time", typeof(string), null, MappingType.Element);
                Columns.Add(columnTime);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedEmploeeSiteRow NewHoursWorkedEmploeeSiteRow()
            {
                return (HoursWorkedEmploeeSiteRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new HoursWorkedEmploeeSiteRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(HoursWorkedEmploeeSiteRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (HoursWorkedEmploeeSiteRowChanged is object)
                {
                    HoursWorkedEmploeeSiteRowChanged?.Invoke(this, new HoursWorkedEmploeeSiteRowChangeEvent((HoursWorkedEmploeeSiteRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (HoursWorkedEmploeeSiteRowChanging is object)
                {
                    HoursWorkedEmploeeSiteRowChanging?.Invoke(this, new HoursWorkedEmploeeSiteRowChangeEvent((HoursWorkedEmploeeSiteRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (HoursWorkedEmploeeSiteRowDeleted is object)
                {
                    HoursWorkedEmploeeSiteRowDeleted?.Invoke(this, new HoursWorkedEmploeeSiteRowChangeEvent((HoursWorkedEmploeeSiteRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (HoursWorkedEmploeeSiteRowDeleting is object)
                {
                    HoursWorkedEmploeeSiteRowDeleting?.Invoke(this, new HoursWorkedEmploeeSiteRowChangeEvent((HoursWorkedEmploeeSiteRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveHoursWorkedEmploeeSiteRow(HoursWorkedEmploeeSiteRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new dsReports();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HoursWorkedEmploeeSiteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class HoursWorkedYardRow : DataRow
        {
            private HoursWorkedYardDataTable tableHoursWorkedYard;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal HoursWorkedYardRow(DataRowBuilder rb) : base(rb)
            {
                tableHoursWorkedYard = (HoursWorkedYardDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Yard
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableHoursWorkedYard.YardColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Yard' in table 'HoursWorkedYard' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableHoursWorkedYard.YardColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Punch_Type
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableHoursWorkedYard.Punch_TypeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Punch Type' in table 'HoursWorkedYard' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableHoursWorkedYard.Punch_TypeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Time
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableHoursWorkedYard.TimeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Time' in table 'HoursWorkedYard' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableHoursWorkedYard.TimeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsYardNull()
            {
                return IsNull(tableHoursWorkedYard.YardColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetYardNull()
            {
                this[tableHoursWorkedYard.YardColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsPunch_TypeNull()
            {
                return IsNull(tableHoursWorkedYard.Punch_TypeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetPunch_TypeNull()
            {
                this[tableHoursWorkedYard.Punch_TypeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTimeNull()
            {
                return IsNull(tableHoursWorkedYard.TimeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTimeNull()
            {
                this[tableHoursWorkedYard.TimeColumn] = Convert.DBNull;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class HoursWorkedYardTypeRow : DataRow
        {
            private HoursWorkedYardTypeDataTable tableHoursWorkedYardType;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal HoursWorkedYardTypeRow(DataRowBuilder rb) : base(rb)
            {
                tableHoursWorkedYardType = (HoursWorkedYardTypeDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Yard
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableHoursWorkedYardType.YardColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Yard' in table 'HoursWorkedYardType' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableHoursWorkedYardType.YardColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Type
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableHoursWorkedYardType.TypeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Type' in table 'HoursWorkedYardType' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableHoursWorkedYardType.TypeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Punch_Type
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableHoursWorkedYardType.Punch_TypeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Punch Type' in table 'HoursWorkedYardType' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableHoursWorkedYardType.Punch_TypeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Time
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableHoursWorkedYardType.TimeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Time' in table 'HoursWorkedYardType' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableHoursWorkedYardType.TimeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsYardNull()
            {
                return IsNull(tableHoursWorkedYardType.YardColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetYardNull()
            {
                this[tableHoursWorkedYardType.YardColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTypeNull()
            {
                return IsNull(tableHoursWorkedYardType.TypeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTypeNull()
            {
                this[tableHoursWorkedYardType.TypeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsPunch_TypeNull()
            {
                return IsNull(tableHoursWorkedYardType.Punch_TypeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetPunch_TypeNull()
            {
                this[tableHoursWorkedYardType.Punch_TypeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTimeNull()
            {
                return IsNull(tableHoursWorkedYardType.TimeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTimeNull()
            {
                this[tableHoursWorkedYardType.TimeColumn] = Convert.DBNull;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class HoursWorkedEmploeeSiteRow : DataRow
        {
            private HoursWorkedEmploeeSiteDataTable tableHoursWorkedEmploeeSite;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal HoursWorkedEmploeeSiteRow(DataRowBuilder rb) : base(rb)
            {
                tableHoursWorkedEmploeeSite = (HoursWorkedEmploeeSiteDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Name_Employee
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableHoursWorkedEmploeeSite.Name_EmployeeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Name Employee' in table 'HoursWorkedEmploeeSite' is DBNull." + "", e);
                    }
                }

                set
                {
                    this[tableHoursWorkedEmploeeSite.Name_EmployeeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Type
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableHoursWorkedEmploeeSite.TypeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Type' in table 'HoursWorkedEmploeeSite' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableHoursWorkedEmploeeSite.TypeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Yard
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableHoursWorkedEmploeeSite.YardColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Yard' in table 'HoursWorkedEmploeeSite' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableHoursWorkedEmploeeSite.YardColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Punch_Type
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableHoursWorkedEmploeeSite.Punch_TypeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Punch Type' in table 'HoursWorkedEmploeeSite' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableHoursWorkedEmploeeSite.Punch_TypeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Time
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableHoursWorkedEmploeeSite.TimeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Time' in table 'HoursWorkedEmploeeSite' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableHoursWorkedEmploeeSite.TimeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsName_EmployeeNull()
            {
                return IsNull(tableHoursWorkedEmploeeSite.Name_EmployeeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetName_EmployeeNull()
            {
                this[tableHoursWorkedEmploeeSite.Name_EmployeeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTypeNull()
            {
                return IsNull(tableHoursWorkedEmploeeSite.TypeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTypeNull()
            {
                this[tableHoursWorkedEmploeeSite.TypeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsYardNull()
            {
                return IsNull(tableHoursWorkedEmploeeSite.YardColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetYardNull()
            {
                this[tableHoursWorkedEmploeeSite.YardColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsPunch_TypeNull()
            {
                return IsNull(tableHoursWorkedEmploeeSite.Punch_TypeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetPunch_TypeNull()
            {
                this[tableHoursWorkedEmploeeSite.Punch_TypeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTimeNull()
            {
                return IsNull(tableHoursWorkedEmploeeSite.TimeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTimeNull()
            {
                this[tableHoursWorkedEmploeeSite.TimeColumn] = Convert.DBNull;
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class HoursWorkedYardRowChangeEvent : EventArgs
        {
            private HoursWorkedYardRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedYardRowChangeEvent(HoursWorkedYardRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedYardRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class HoursWorkedYardTypeRowChangeEvent : EventArgs
        {
            private HoursWorkedYardTypeRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedYardTypeRowChangeEvent(HoursWorkedYardTypeRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedYardTypeRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class HoursWorkedEmploeeSiteRowChangeEvent : EventArgs
        {
            private HoursWorkedEmploeeSiteRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedEmploeeSiteRowChangeEvent(HoursWorkedEmploeeSiteRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public HoursWorkedEmploeeSiteRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }
    }
}